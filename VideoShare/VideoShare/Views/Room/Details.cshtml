@model VideoShare.Models.RoomModels
<head>
    <link href="~/Content/Site.css" rel="stylesheet" type="text/css" />
</head>

@{
    ViewBag.Title = "Your Room - SIT";
}

<h2>Room - Host</h2>

<div>
    <h4>Your personal room</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.RoomName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RoomName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RoomCode)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RoomCode)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RoomUrl)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RoomUrl)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RoomOwner)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RoomOwner)
        </dd>

    </dl>
</div>
<p>
    <div id="SamplePlayerDivID"></div>
    <input type="button" id="play" value="Play" />
    <input type="button" id="pause" value="Pause" />

    <div id="css_purposes" style="display: inline">
        @Html.ActionLink("Edit", "Edit", "Room", new { id = Model.RoomID }, null) |
        @if (User.IsInRole("Admin"))
        {
            @Html.ActionLink("Back to List", "Index");
        }
        @if (User.IsInRole("User"))
        {
            @Html.ActionLink("Back to List", "Account", "User", null, null);
        }
    </div>

    @* VOLUME SLIDER *@
    <div class="slidecontainer" align="center">
<p class="speaker-icon">🔊</p>
<input type="range" min="0" max="100" value="50" class="slider" id="VolumeSlider">
<p><span id="VolumeValue" class="VolumeValue"></span></p>
</div>
<style>
    .slidecontainer {
        width: 10%;
        display: block;
        position: absolute;
        padding: 10px;
        text-align: left;
        vertical-align: middle;
        float: left;
    }

    .speaker-icon {
        font-size: 20px;
        float: left;
    }

    .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 10px;
        border-radius: 5px;
        background: #d3d3d3;
        outline: none;
        opacity: 0.7;
        -webkit-transition: .2s;
        transition: opacity .2s;
        float: left;
        margin-top: 10px;
    }

        .slider:hover {
            opacity: 1;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #2fa4e7;
            cursor: pointer;
        }

    .VolumeValue {
        font-size: 12px;
        float: left;
        margin-top: 5px;
        margin-left: 5px;
    }
</style>
@* END VOLUME SLIDER *@

<br />
<br />
<br />
<br />

<div class="chatbox" style="margin-top:-554px;">
    <h2>Chat</h2>
    <hr />
    <div id="scroll" style="padding-left: 15px; height: 350px; overflow:auto;">
        <ul id="discussion"></ul>
    </div>
    <hr />
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
    </div>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.3.min.js"></script>
    <script src="http://player.twitch.tv/js/embed/v1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };

            // Get the user name and store it to prepend to messages.
            $('#displayname').val('@HttpContext.Current.User.Identity.Name.ToString()');
            var roomCode = '@Model.RoomCode';
            // Set initial focus to message input box.
            $('#message').focus();
            console.log("variables defined");

            // Start the connection.
            $.connection.hub.start().done(function () {

                chat.server.joinGroup(roomCode, $('#displayname').val())
                console.log("joingroup called");

                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    console.log("inside button click");

                    chat.server.send($('#displayname').val(), $('#message').val(), roomCode);
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        var temp = "@Html.DisplayFor(model => model.RoomUrl)";
        var num = temp.lastIndexOf("/");

        var options = {
            width: 854,
            height: 480,
            video: "v" + temp.substr(num),
            autoplay: false,
        };

        var player = new Twitch.Player("SamplePlayerDivID", options);

        $(function () {

            var chat = $.connection.chatHub;

            chat.client._pause = function () {
                player.pause()
            }

            chat.client._play = function (time) {
                player.seek(time);
                player.play();
            }

            var roomCode = '@Model.RoomCode';

            $('#play').click(function () {
                var time = player.getCurrentTime();
                console.log("play clicked");
                chat.server.play(roomCode, time);
            });
            $('#pause').click(function () {
                //console.log("pause clicked");
                chat.server.pause(roomCode);
            });
        });

        // VOLUME SLIDER
        var volume_slider = document.getElementById("VolumeSlider");
        var volume_value = document.getElementById("VolumeValue");
        volume_value.innerHTML = volume_slider.value;

        volume_slider.oninput = function () {
            player.setVolume(volume_slider.value / 100);
            volume_value.innerHTML = this.value;
        }
        // END VOLUME SLIDER
    </script>
}
